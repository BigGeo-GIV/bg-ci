name: Continuous Integration

on:
  workflow_call:
    inputs:
      conan_create:
        required: false
        default: false
        type: boolean
      test_os_matrix:
        required: false
        default: "['ubuntu-22.04', 'windows-2022', 'macos-12']"
        type: string
      build_docs:
        required: false
        default: false
        type: boolean
      store_artifacts:
        required: false
        default: false
        type: boolean
      docker_deploy:
        required: false
        default: false
        type: boolean
    secrets:
      GH_ACCESS:
        required: true
      JF_ACCESS_TOKEN:
        required: true
      JF_CONAN_URL:
        required: true

jobs:
  lint:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - uses: actions/setup-python@v4
      with: { python-version: "3.8" }

    - name: Install clang-format
      run: pip3 install clang-format>=15.0.6

    - name: clang-format
      run: cmake -D FORMAT_COMMAND=clang-format -P cmake/lint.cmake

  coverage:
    runs-on: ubuntu-22.04

    env: {CONAN_REVISIONS_ENABLED: 1}

    steps:
    - uses: actions/checkout@v3
      with: { submodules: recursive }

    - name: Install LCov
      run: |
        sudo apt-get update -q
        sudo apt-get install lcov -q -y

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.8" }

    - name: Dependencies
      uses: BigGeo-GIV/bg-ci/.github/actions/conan-dependencies@main
      with:
        JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
        JF_CONAN_URL: ${{ secrets.JF_CONAN_URL }}

    - name: Install gcc-12
      run: |
        sudo apt install gcc-12
        sudo apt install g++-12
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 50
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 50
        sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-12 50
        conan profile update settings.compiler.version=12 default

    - name: Configure
      run: cmake --preset=ci-coverage

    - name: Build
      run: cmake --build build/coverage -j 2

    - name: Test
      working-directory: build/coverage
      run: ctest --output-on-failure -j 2

    - name: Process coverage info
      run: cmake --build build/coverage -t coverage

    - name: Submit to codecov.io
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: build/coverage/coverage.info
        fail_ci_if_error: false
        verbose: true # optional (default = false)

  # sanitize:
  #   needs: [lint]
  #   runs-on: ubuntu-22.04

  #   env: {CONAN_REVISIONS_ENABLED: 1}

  #   steps:
  #   - uses: actions/checkout@v3
  #     with: { submodules: recursive }

  #   - name: Install Python
  #     uses: actions/setup-python@v4
  #     with: { python-version: "3.8" }

  #   - name: Dependencies
  #     uses: BigGeo-GIV/bg-ci/.github/actions/conan-dependencies@main
  #     with:
  #       JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
  #       JF_CONAN_URL: ${{ secrets.JF_CONAN_URL }}

  #   - name: Install clang 15
  #     run: |
  #       curl https://apt.llvm.org/llvm.sh --output /opt/llvm.sh
  #       chmod +x /opt/llvm.sh
  #       sudo /opt/llvm.sh 15

  #   - name: Configure
  #     env: { CC: clang, CXX: clang++-15 }
  #     run: cmake --preset=ci-sanitize

  #   - name: Build
  #     run: cmake --build build/sanitize -j 2

  #   - name: Test
  #     working-directory: build/sanitize
  #     env:
  #       ASAN_OPTIONS: "strict_string_checks=1:\
  #         detect_stack_use_after_return=1:\
  #         check_initialization_order=1:\
  #         strict_init_order=1:\
  #         detect_leaks=1"
  #       UBSAN_OPTIONS: print_stacktrace=1
  #     run: ctest --output-on-failure -j 2

  build-and-test:
    env: {CONAN_REVISIONS_ENABLED: 1}

    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.test_os_matrix) }}

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      with: { submodules: recursive }

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.8" }

    - name: Install clang
      if: matrix.os == 'ubuntu-22.04'
      run: |
        curl https://apt.llvm.org/llvm.sh --output /opt/llvm.sh
        chmod +x /opt/llvm.sh
        sudo /opt/llvm.sh 16

    - name: Install llvm clang
      if: matrix.os == 'macos-12'
      run: |
        brew install llvm@16
        echo 'export PATH="/usr/local/opt/llvm/bin:$PATH"' >> ~/.bash_profile
        /usr/local/opt/llvm/bin/clang++ --version

    - name: Dependencies
      uses: BigGeo-GIV/bg-ci/.github/actions/conan-dependencies@main
      with:
        JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
        JF_CONAN_URL: ${{ secrets.JF_CONAN_URL }}

    - name: Configure
      shell: bash
      env: { CC: clang-16, CXX: clang++-16 }
      run: |
        if [ ${{ matrix.os }} = macos-12 ]; then
          export CC=/usr/local/opt/llvm/bin/clang
          export CXX=/usr/local/opt/llvm/bin/clang++
        fi
        osAry=($(echo ${{ matrix.os }} | tr "-" "\n")) && os=${osAry[0]}
        cmake "--preset=ci-${os}"

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: build
      run: ctest --output-on-failure -C Release -j 2

    # TODO better way to handle uploading to conan

    - name: Upload to conan
      shell: bash
      if: github.ref == 'refs/heads/main'
        && github.event_name == 'push'
        && inputs.conan_create
      run: |
        if [ ${{ matrix.os }} = macos-12 ]; then
          export CC=/usr/local/opt/llvm/bin/clang
          export CXX=/usr/local/opt/llvm/bin/clang++
        fi
        conan create . -b missing
        nameAry=($(conan inspect . | grep name | tr ":" "\n")) && name=${nameAry[1]}
        verAry=($(conan inspect . | grep version | tr ":" "\n")) && ver=${verAry[1]}
        nameVer=$(echo ${name}/${ver})
        conan upload ${nameVer} -r bg-conan -c

    - name: Upload artifacts
      if: inputs.store_artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-executable
        path: build/

  docker-deploy:
    # Deploy docker container only when builds succeed
    # TODO: I have just copied everything Dawood did into here.
    # Probably we need to generalize it a bit more.
    needs: [build-and-test]
    runs-on: ubuntu-22.04
    if: inputs.docker_deploy && inputs.store_artifacts

    steps:
      - uses: actions/checkout@v3

      - name: Download bg-search Artifact
        uses: actions/download-artifact@v3
        with:
          # Artifact name
          name: ubuntu-22.04-executable
          path: ./Docker/

      - name: See variables
        run: |
          echo ${{secrets.BG_SEARCH_DOCKER_REGISTRY_SERVER}} ${{secrets.BG_SEARCH_DOCKER_REGISTRY_NAME}} ${{secrets.BG_SEARCH_DOCKER_REGISTRY_PSWD}}

      - name: See Docker directory
        run: ls

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v2

      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ${{secrets.BG_SEARCH_DOCKER_REGISTRY_SERVER}}
          username: ${{secrets.BG_SEARCH_DOCKER_REGISTRY_NAME}}
          password: ${{secrets.BG_SEARCH_DOCKER_REGISTRY_PSWD}}
      - name: Build and push bg-search docker image
        uses: docker/build-push-action@v3
        with:
          push: true
          context: ./Docker/
          tags: |
            crbgsearchdevwestus001.azurecr.io/bg-search-test:latest
          #build-args: REACT_APP_ENV=prod

  docs:
    # Deploy docs only when builds succeed
    needs: [build-and-test]

    runs-on: ubuntu-22.04

    if: github.ref == 'refs/heads/main'
      && github.event_name == 'push'
      && inputs.build_docs

    steps:
    - uses: actions/checkout@v3
      with: { submodules: recursive }

    - uses: actions/setup-python@v4
      with: { python-version: "3.10" }

    - name: Install poxy dependencies
      run: pip3 install poxy

    - name: Install Doxygen
      run: |
        sudo apt-get update -q
        sudo apt-get install doxygen -q -y

    - name: Build docs
      run: poxy ./docs/poxy.toml

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./html
