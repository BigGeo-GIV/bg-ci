name: Continuous Integration

on:
  workflow_call:
    inputs:
      conan_create:
        required: false
        default: false
        type: boolean
      test_os_matrix:
        required: false
        default: "['macos-latest']"
        type: string
      build_docs:
        required: false
        default: false
        type: boolean
      store_artifacts:
        required: false
        default: false
        type: boolean
      docker_deploy:
        required: false
        default: false
        type: boolean
    secrets:
      GH_ACCESS:
        required: true
      JF_ACCESS_TOKEN:
        required: true
      JF_CONAN_URL:
        required: true

jobs:
  # lint:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       token: ${{ secrets.GH_ACCESS }}
  #       repository: ${{ github.event.pull_request.head.repo.full_name }}
  #       ref: ${{ github.head_ref }}
  #       submodules: recursive

  #   - uses: actions/setup-python@v4
  #     with: { python-version: "3.10" }

  #   - name: Install clang-format
  #     run: pip3 install clang-format==17.0.2

  #   - name: clang-format
  #     run: cmake -D FORMAT_COMMAND=clang-format -D FIX=YES -P cmake/lint.cmake

  #   - name: Commit and push format
  #     env:
  #       GH_TOKEN: ${{ secrets.GH_ACCESS }}
  #     if: github.event_name == 'pull_request'
  #     run: |
  #       git config --local user.name "github-actions[bot]"
  #       git config --local user.email "github-actions[bot]@users.noreply.github.com"
  #       if [[ `git status --porcelain` ]]; then
  #         echo "Changes detected. Pushing to github."
  #         git commit -am "fixing format"
  #         git push
  #       else
  #         echo "No changes were detected."
  #       fi


  # coverage:
  #   # Run coverage only when lint succeed
  #   needs: [lint]
  #   runs-on: ubuntu-latest

  #   env: {CONAN_REVISIONS_ENABLED: 1}

  #   steps:
  #   - uses: actions/checkout@v3
  #     with: { submodules: recursive }

  #   - name: Install LCov
  #     run: |
  #       sudo apt-get update -q
  #       sudo apt-get install lcov -q -y

  #   - name: Install Python
  #     uses: actions/setup-python@v4
  #     with: { python-version: "3.10" }

  #   - name: Use gcc-12
  #     run: |
  #       sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 50
  #       sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 50
  #       sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-12 50

  #   - name: Dependencies
  #     uses: BigGeo-GIV/bg-ci/.github/actions/conan-dependencies@main
  #     with:
  #       JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
  #       JF_CONAN_URL: ${{ secrets.JF_CONAN_URL }}

  #   - name: Configure
  #     run: cmake --preset=ci-coverage

  #   - name: Build
  #     run: cmake --build build/coverage -j 2

  #   - name: Process coverage info
  #     run: cmake --build build/coverage -t coverage

  #   - name: Submit to codecov.io
  #     uses: codecov/codecov-action@v3
  #     with:
  #       token: ${{ secrets.CODECOV_TOKEN }}
  #       file: build/coverage/coverage.info
  #       fail_ci_if_error: false
  #       verbose: true # optional (default = false)

  build-and-test:
    # Run build-and-test only when lint succeed
   # needs: [lint]
    env: {CONAN_REVISIONS_ENABLED: 1}

    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.test_os_matrix) }}

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      with: { submodules: recursive }

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.10" }

    - name: Install clang
      if: matrix.os == 'ubuntu-latest'
      run: |
        curl https://apt.llvm.org/llvm.sh --output /opt/llvm.sh
        chmod +x /opt/llvm.sh
        sudo /opt/llvm.sh 18
        sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang-18 50
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-18 50

    - name: Install llvm clang
      if: matrix.os == 'macos-latest'
      run: |
        brew install llvm
        echo '' >> /Users/runner/.bash_profile
        echo 'export PATH="/opt/homebrew/opt/llvm/bin:$PATH"' >> /Users/runner/.bash_profile
        cat /Users/runner/.bash_profile

    - name: Install llvm clang
      if: matrix.os == 'macos-latest'
      run: |
        echo $PATH
        echo $CXX
        cat /Users/runner/.bash_profile
        clang++ --version

    - name: Dependencies
      uses: BigGeo-GIV/bg-ci/.github/actions/conan-dependencies@main
      with:
        JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
        JF_CONAN_URL: ${{ secrets.JF_CONAN_URL }}

    - name: Upload to conan
      shell: bash
      if: matrix.os == 'ubuntu-22.04'
        && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        && github.event_name == 'push'
        && inputs.conan_create
      run: |
        export CONAN_DEV_PACKAGE=1
        if [ ${{ github.ref }} = refs/heads/main ]; then
          export CONAN_DEV_PACKAGE=0
        fi
        conan create . -b missing -pr:a ${{ runner.os }}
        nameAry=($(conan inspect . | grep name | tr ":" "\n")) && name=${nameAry[1]}
        verAry=($(conan inspect . | grep version | tr ":" "\n")) && ver=${verAry[1]}
        nameVer=$(echo ${name}/${ver})
        conan upload ${nameVer} -r bg-conan -c

    - name: Configure
      shell: bash
      run: |
        osAry=($(echo ${{ matrix.os }} | tr "-" "\n")) && os=${osAry[0]}
        cmake "--preset=ci-${os}"

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      if: matrix.os == 'ubuntu-22.04'
      working-directory: build
      run: ctest --timeout 3600 --output-on-failure -C Release -j 2

    - name: Upload artifacts
      if: inputs.store_artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-executable
        path: build/

  docs:
    # Deploy docs only when builds succeed
    needs: [build-and-test]

    runs-on: ubuntu-22.04

    if: github.ref == 'refs/heads/main'
      && github.event_name == 'push'
      && inputs.build_docs

    steps:
    - uses: actions/checkout@v3
      with: { submodules: recursive }

    - uses: actions/setup-python@v4
      with: { python-version: "3.10" }

    - name: Install poxy dependencies
      run: pip3 install poxy

    - name: Install Doxygen
      run: |
        sudo apt-get update -q
        sudo apt-get install doxygen -q -y

    - name: Build docs
      run: poxy ./docs/poxy.toml

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./html
