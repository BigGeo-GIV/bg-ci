name: Continuous Integration

on:
  workflow_call:
    inputs:
      conan_create:
        required: false
        default: false
        type: boolean
      build_python:
        required: false
        default: false
        type: boolean
    secrets:
      GH_ACCESS:
        required: true
      JF_ACCESS_TOKEN:
        required: true
      JF_CONAN_URL:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-22.04
    outputs:
      incs:  ${{ steps.matrix.outputs.incs }}
      comps: ${{ steps.matrix.outputs.comps }}
      extended: ${{ steps.which.outputs.extended }}

    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GH_ACCESS }}
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.head_ref }}
        submodules: recursive

    - uses: snnaplab/get-labels-action@v1
    - id: which
      run: |
        if [[ \
          ( \
            ('${{ github.ref }}' == 'refs/heads/main' \
              || '${{ github.ref }}' == 'refs/heads/develop' \
            ) \
            && '${{ github.event_name }}' == 'push' \
          ) \
          || '${{ contains(fromJSON(env.LABELS), 'extended ci') }}' == 'true' ]]; then
          echo "extended=true" >> "$GITHUB_OUTPUT"
        else
          echo "extended=false" >> "$GITHUB_OUTPUT"
        fi

    - id: matrix
      run: |
        if [[ '${{ steps.which.outputs.extended }}' == 'true' ]]; then
          comps='[["gcc", 13], ["gcc", 14], ["clang", 17], ["clang", 18]]'
          incs='[ {"os": "ubuntu-22.04", "comp": ["gcc", 12]},  {"os": "macos-13"}, {"os": "windows-2022"}]'
          echo "comps=${comps}" >> "$GITHUB_OUTPUT"
          echo "incs=${incs}" >> "$GITHUB_OUTPUT"
        else
          comps='[["clang", 18]]'
          incs='[ {"os": "ubuntu-22.04", "comp": ["gcc", 12]}, {"os": "macos-13"}, {"os": "windows-2022"}]'
          echo "comps=${comps}" >> "$GITHUB_OUTPUT"
          echo "incs=${incs}" >> "$GITHUB_OUTPUT"
        fi

    - uses: actions/setup-python@v4
      with: { python-version: "3.10" }

    - name: Install clang-format
      run: pip3 install clang-format==17.0.2

    - name: clang-format
      run: cmake -D FORMAT_COMMAND=clang-format -D FIX=YES -P cmake/lint.cmake

    - name: Commit and push format
      env:
        GH_TOKEN: ${{ secrets.GH_ACCESS }}
      if: github.event_name == 'pull_request'
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        if [[ `git status --porcelain` ]]; then
          echo "Changes detected. Pushing to github."
          git commit -am "fixing format"
          git push
        else
          echo "No changes were detected."
        fi

  build-and-test:
    # Run build-and-test only when lint succeed
    needs: [lint]

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        comp: ${{ fromJson(needs.lint.outputs.comps) }}
        include: ${{ fromJson(needs.lint.outputs.incs) }}

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    steps:
    - name: Install llvm clang
      if: runner.os == 'macOS'
      run: brew install llvm@18

    - name: Set ENV
      run: |
        if [ ${{ matrix.comp[0] }} = gcc ]; then
          echo "CC=gcc-${{ matrix.comp[1] }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.comp[1] }}" >> $GITHUB_ENV
        elif [ ${{ matrix.comp[0] }} = clang ]; then
          echo "CC=clang-${{ matrix.comp[1] }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ matrix.comp[1] }}" >> $GITHUB_ENV
        elif [ ${{ runner.os }} = macOS ]; then
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV
        fi

    - uses: actions/checkout@v3
      with: { submodules: recursive }

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.10" }

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: false

    - name: Install python dependencies
      run: poetry update --no-interaction

    - name: Dependencies
      run: |
        invoke setup
        conan remote login -p ${{ secrets.JF_ACCESS_TOKEN }} bg-conan github_workflow
        invoke deps --buildtype Release
        conan upload "*" -r bg-conan -c

    - name: Upload to conan
      shell: bash
      if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        && github.event_name == 'push'
        && inputs.conan_create
      run: |
        export CONAN_DEV_PACKAGE=1
        if [ ${{ github.ref }} = refs/heads/main ]; then
          export CONAN_DEV_PACKAGE=0
        fi
        conan create . -b missing -pr:a bg-profile
        nameAry=($(conan inspect . | grep name | tr ":" "\n")) && name=${nameAry[1]}
        verAry=($(conan inspect . | grep version | tr ":" "\n")) && ver=${verAry[1]}
        nameVer=$(echo ${name}/${ver})
        conan upload ${nameVer} -r bg-conan -c

    - name: Configure
      shell: bash
      run: |
        osAry=($(echo ${{ matrix.os }} | tr "-" "\n")) && os=${osAry[0]}
        invoke config --no-ninja --preset "ci-${os}"

    - name: Build
      shell: bash
      run: |
        osAry=($(echo ${{ matrix.os }} | tr "-" "\n")) && os=${osAry[0]}
        invoke build --preset ci-${os}

    - name: Tests
      if: matrix.comp[0] == 'clang' && matrix.comp[1] == '18'
      run: |
        if [[ '${{ needs.lint.outputs.extended }}' == 'true' ]]; then
          invoke test --extended
        else
          invoke test
        fi

  build-python:
    # Run build python only when lint succeed
    needs: [lint]
    if: inputs.build_python

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        comp: [["clang", 18]]
        include: ${{ fromJson(needs.lint.outputs.incs) }}

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    steps:
    - name: Install llvm clang
      if: runner.os == 'macOS'
      run: brew install llvm@18

    - name: Set ENV
      run: |
        if [ ${{ matrix.comp[0] }} = gcc ]; then
          echo "CC=gcc-${{ matrix.comp[1] }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.comp[1] }}" >> $GITHUB_ENV
        elif [ ${{ matrix.comp[0] }} = clang ]; then
          echo "CC=clang-${{ matrix.comp[1] }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ matrix.comp[1] }}" >> $GITHUB_ENV
        elif [ ${{ runner.os }} = macOS ]; then
          echo "CC=$(brew --prefix llvm@18)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@18)/bin/clang++" >> $GITHUB_ENV
        fi

    - uses: actions/checkout@v3
      with: { submodules: recursive }

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.10" }

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: false

    - name: Install python dependencies
      run: poetry update --no-interaction

    - name: Dependencies
      run: |
        invoke setup
        conan remote login -p ${{ secrets.JF_ACCESS_TOKEN }} bg-conan github_workflow
        invoke deps --buildtype Release

    - name: Build Python
      run: |
        invoke pyinstall
        invoke pytest

  on-failure:
    runs-on: ubuntu-24.04
    needs: [build-and-test, build-python]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
    - uses: actions/checkout@v2
    - name: Send custom event details to a Slack workflow
      uses: slackapi/slack-github-action@v2.0.0
      with:
        webhook: ${{ secrets.SCIENCE_BOT_URL }}
        webhook-type: webhook-trigger
        payload: |
          repo: "${{ github.event.repository.name }}"
          branch: "${{ github.head_ref || github.ref_name }}"
          workflow_link: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
