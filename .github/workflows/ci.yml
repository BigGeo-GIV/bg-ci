name: Continuous Integration

on:
  workflow_call:
    inputs:
      conan_create:
        required: false
        default: false
        type: boolean
      test_os_matrix:
        required: false
        default: "['ubuntu-22.04', 'windows-2022', 'macos-12']"
        type: string
      build_docs:
        required: false
        default: false
        type: boolean
      store_artifacts:
        required: false
        default: false
        type: boolean
      docker_deploy:
        required: false
        default: false
        type: boolean
      build_python:
        required: false
        default: false
        type: boolean
    secrets:
      GH_ACCESS:
        required: true
      JF_ACCESS_TOKEN:
        required: true
      JF_CONAN_URL:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GH_ACCESS }}
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.head_ref }}
        submodules: recursive

    - uses: actions/setup-python@v4
      with: { python-version: "3.10" }

    - name: Install clang-format
      run: pip3 install clang-format==17.0.2

    - name: clang-format
      run: cmake -D FORMAT_COMMAND=clang-format -D FIX=YES -P cmake/lint.cmake

    - name: Commit and push format
      env:
        GH_TOKEN: ${{ secrets.GH_ACCESS }}
      if: github.event_name == 'pull_request'
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        if [[ `git status --porcelain` ]]; then
          echo "Changes detected. Pushing to github."
          git commit -am "fixing format"
          git push
        else
          echo "No changes were detected."
        fi

  build-and-test:
    # Run build-and-test only when lint succeed
    needs: [lint]

    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-24.04
          comp: gcc
          compv: 12
        - os: ubuntu-24.04
          comp: gcc
          compv: 13
        - os: ubuntu-24.04
          comp: gcc
          compv: 14
        - os: ubuntu-24.04
          comp: clang
          compv: 16
        - os: ubuntu-24.04
          comp: clang
          compv: 17
        - os: ubuntu-24.04
          comp: clang
          compv: 18
        - os: macos-13
        - os: windows-2022

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    steps:
    - name: Set ENV
      if: ${{ matrix.comp }}
      run: |
        if [ ${{ matrix.comp }} = gcc ]; then
          echo "CC=gcc-${{ matrix.compv }} >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.compv }} >> $GITHUB_ENV
        elif [ ${{ matrix.comp }} = clang ]; then
          echo "CC=clang-${{ matrix.compv }} >> $GITHUB_ENV
          echo "CXX=clang++-${{ matrix.compv }} >> $GITHUB_ENV
        elif [ ${{ matrix.os }} = macos-13 ]; then
          echo "CC=/opt/homebrew/opt/llvm@18/bin/clang-${{ matrix.compv }} >> $GITHUB_ENV
          echo "CXX=/opt/homebrew/opt/llvm@18/bin/clang++-${{ matrix.compv }} >> $GITHUB_ENV
        fi

    - uses: actions/checkout@v3
      with: { submodules: recursive }

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.10" }

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: false

    - name: Install python dependencies
      run: poetry update --no-interaction

    - name: Install llvm clang
      if: matrix.os == 'macos-14'
      run: |
        brew install llvm@18

    - name: Dependencies
      uses: BigGeo-GIV/bg-ci/.github/actions/conan-dependencies@testing
      with:
        JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

    - name: Upload to conan
      shell: bash
      if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        && github.event_name == 'push'
        && inputs.conan_create
      run: |
        export CONAN_DEV_PACKAGE=1
        if [ ${{ github.ref }} = refs/heads/main ]; then
          export CONAN_DEV_PACKAGE=0
        fi
        conan create . -b missing -pr:a bg-profile
        nameAry=($(conan inspect . | grep name | tr ":" "\n")) && name=${nameAry[1]}
        verAry=($(conan inspect . | grep version | tr ":" "\n")) && ver=${verAry[1]}
        nameVer=$(echo ${name}/${ver})
        conan upload ${nameVer} -r bg-conan -c

    - name: Configure
      shell: bash
      run: |
        osAry=($(echo ${{ matrix.os }} | tr "-" "\n")) && os=${osAry[0]}
        invoke config --no-ninja --preset "ci-${os}"

    - name: Build
      shell: bash
      run: |
        osAry=($(echo ${{ matrix.os }} | tr "-" "\n")) && os=${osAry[0]}
        invoke build --preset ci-${os}

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Precheckin Test
      if: matrix.os == 'ubuntu-22.04' && github.event_name == 'pull_request'
      run: invoke test

    - name: Extended Test
      if: matrix.os == 'ubuntu-22.04'
          && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
          && github.event_name == 'push'
      run: invoke test --extended

  build-python:
    # Run build python only when lint succeed
    needs: [lint]
    if: inputs.build_python

    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-24.04
          cc: clang-18
          cxx: clang++-18
        - os: macos-13
          cc: /opt/homebrew/opt/llvm@18/bin/clang
          cxx: /opt/homebrew/opt/llvm@18/bin/clang++
        - os: windows-2022
          cc: cl.exe
          cxx: cl.exe

    runs-on: ${{ matrix.os }}

    env:
      CC: matrix.cc
      CXX: matrix.cxx

    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v3
      with: { submodules: recursive }

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.10" }

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: false

    - name: Install python dependencies
      run: poetry update --no-interaction

    - name: Install llvm clang
      if: matrix.os == 'macos-14'
      run: |
        brew install llvm@18

    - name: Dependencies
      uses: BigGeo-GIV/bg-ci/.github/actions/conan-dependencies@testing
      with:
        JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
        PYTHON_DEPS: true

    - name: Build Python
      env: { CC: clang-16, CXX: clang++-16 }
      run: |
        invoke pyinstall
        invoke pytest
