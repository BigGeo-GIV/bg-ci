name: Deploy

on:
  workflow_call:
    inputs:
      store_artifacts:
        required: false
        default: false
        type: boolean
      docker_deploy:
        required: false
        default: false
        type: boolean
    secrets:
      GH_ACCESS:
        required: true
      JF_ACCESS_TOKEN:
        required: true
      JF_CONAN_URL:
        required: true

jobs:
  build-and-test:
    env:
      CONAN_REVISIONS_ENABLED: 1
      service_name: "'Bg_auto'"
      compute_pool: "'LAND_NA_LEASE'"
      db_name: 'SPDEMO'
      schema_name: 'DATA_SCHEMA'
      spec_file: "'biggeo-b.yaml'"
      table_name: "'LAND_NA_LEASE'"
      geomtype: "'polygon'"

    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
      with: { submodules: recursive }

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.10" }

    - name: Install clang
      run: |
        curl https://apt.llvm.org/llvm.sh --output /opt/llvm.sh
        chmod +x /opt/llvm.sh
        sudo /opt/llvm.sh 16

    - name: Dependencies
      uses: BigGeo-GIV/bg-ci/.github/actions/conan-dependencies@main
      with:
        JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
        JF_CONAN_URL: ${{ secrets.JF_CONAN_URL }}

    - name: Configure
      shell: bash
      env: { CC: clang-16, CXX: clang++-16 }
      run: |
        osAry=($(echo ubuntu-22.04 | tr "-" "\n")) && os=${osAry[0]}
        cmake "--preset=ci-${os}"

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    # - name: Test
    #   working-directory: build
    #   run: ctest --output-on-failure -C Release -j 2

    - name: Upload artifacts
      if: inputs.store_artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ubuntu-22.04-executable
        path: build/

    - name: Move build artifacts
      id: version
      run: |
        mkdir -p Docker
        cp -r build/* Docker
        echo VERSION=dev-0.4.0 >> $GITHUB_OUTPUT

    - name: Set up Docker Build
      uses: docker/setup-buildx-action@v2

    - name: Docker login to Azure Registry
      uses: docker/login-action@v2
      with:
        registry: ${{secrets.BG_SEARCH_DOCKER_REGISTRY_AZ_SERVER}}
        username: ${{secrets.BG_SEARCH_DOCKER_REGISTRY_AZ_NAME}}
        password: ${{secrets.BG_SEARCH_DOCKER_REGISTRY_AZ_PSWD}}
    - name: Docker login to Snowflake Registry
      uses: docker/login-action@v2
      with:
        registry: ${{secrets.BG_SEARCH_DOCKER_REGISTRY_SF_SERVER}}
        username: ${{secrets.BG_SEARCH_DOCKER_REGISTRY_SF_NAME}}
        password: ${{secrets.BG_SEARCH_DOCKER_REGISTRY_SF_PSWD}}
    - name: Docker login to S&P Snowflake Registry
      uses: docker/login-action@v2
      with:
        registry: ${{secrets.BG_SEARCH_DOCKER_REGISTRY_SF_SP_SERVER}}
        username: ${{secrets.BG_SEARCH_DOCKER_REGISTRY_SF_SP_NAME}}
        password: ${{secrets.BG_SEARCH_DOCKER_REGISTRY_SF_SP_PSWD}}

    - name: Build and push bg-search docker image
      uses: docker/build-push-action@v3
      with:
        push: true
        context: ./Docker/
        tags: |
          crbgsearchdevwestus001.azurecr.io/bg-search-test:${{steps.version.outputs.VERSION}}
          eqcqgux-biggeoaws.registry.snowflakecomputing.com/alcyone_db/data_schema/alcyone_repository/bg_server:${{steps.version.outputs.VERSION}}
          ${{secrets.BG_SEARCH_DOCKER_REGISTRY_SF_SP_SERVER}}/bg_server:latest
        #build-args: REACT_APP_ENV=prod

    # - name: Snowflake Query Action
    #   id: snowflake
    #   uses: anecdotes-ai/snowflake-query@v1.2
    #   env:
    #     bg_version: '${{steps.version.outputs.VERSION}}'
    #   with:
    #     # Username for Snowflake DB
    #     snowflake_username: ${{secrets.BG_SEARCH_DOCKER_REGISTRY_SF_SP_NAME}}
    #     # Password for Snowflake DB
    #     snowflake_password: ${{secrets.BG_SEARCH_DOCKER_REGISTRY_SF_SP_PSWD}}
    #     # Account name for Snowflake DB. Your account name is the full/entire string to the left of snowflakecomputing.com.
    #     snowflake_account: 'kyb07147'
    #     # Warehouse as context
    #     snowflake_warehouse: 'BIGGEO'
    #     # Set user role
    #     snowflake_role: 'ALCYONE_ROLE'
    #     # List of SQL queries, seperated by ;
    #     queries: 'CALL ${{env.db_name}}.${{env.schema_name}}.BigGeoDeployment(service_name=>${{env.service_name}},compute_pool=>${{env.compute_pool}},bg_version=>''${{steps.version.outputs.VERSION}}'',db_name=>''${{env.db_name}}'',schema_name=>''${{env.schema_name}}'', spec_file => ${{env.spec_file}}, table_name=>${{env.table_name}}, geomtype => [${{env.geomtype}}])'
    #     # Whether to run the queries sync (default is async)
    #     # sync: # optional
