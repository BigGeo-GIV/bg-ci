name: Deploy

on:
  workflow_call:
    inputs:
      store_artifacts:
        required: false
        default: false
        type: boolean
      dev_version_deploy:
        description: 'Deploy as dev version?'
        required: true
        type: boolean
      name:
        description: 'The name used as a key to get the version from the version.json file. Usually the name of the repo.'
        required: true
        type: string

    secrets:
      GH_ACCESS:
        required: true
      JF_ACCESS_TOKEN:
        required: true
      JF_CONAN_URL:
        required: true

jobs:
  build-and-test:
    env:
      CONAN_REVISIONS_ENABLED: 1

    runs-on: ubuntu-22.04

    outputs:
      docker_name: ${{ steps.docker_name.outputs.NAME }}
      bg_search_version: ${{ steps.version.outputs.VERSION }}

    steps:
    - uses: actions/checkout@v3
      with: { submodules: recursive }

    - uses: actions/checkout@v3
      with:
        repository: BigGeo-GIV/bg-ci
        ref: main
        path: bg-ci
        token: ${{ secrets.GH_ACCESS }}

    - name: Install Python
      uses: actions/setup-python@v4
      with: { python-version: "3.10" }

    - name: Install clang
      run: |
        curl https://apt.llvm.org/llvm.sh --output /opt/llvm.sh
        chmod +x /opt/llvm.sh
        sudo /opt/llvm.sh 16

    - name: Dependencies
      uses: BigGeo-GIV/bg-ci/.github/actions/conan-dependencies@main
      with:
        JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
        JF_CONAN_URL: ${{ secrets.JF_CONAN_URL }}

    - name: Configure
      shell: bash
      env: { CC: clang-16, CXX: clang++-16 }
      run: |
        osAry=($(echo ubuntu-22.04 | tr "-" "\n")) && os=${osAry[0]}
        cmake "--preset=ci-${os}"

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    # - name: Test
    #   working-directory: build
    #   run: ctest --output-on-failure -C Release -j 2

    - name: Upload artifacts
      if: inputs.store_artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ubuntu-22.04-executable
        path: build/

    - name: Development version
      id: dev_version
      if: inputs.dev_version_deploy
      run: |
        echo "DEV_PREFIX=dev-" >> "$GITHUB_OUTPUT"

    - name: Setup for docker and set version
      id: version
      run: |
        mkdir -p Docker
        cp -r build/* Docker
        ver=$(python3 bg-ci/GetVersion.py version.json ${{ inputs.name }} ${{ inputs.dev_version_deploy }})
        echo "VERSION=${{steps.dev_version.outputs.DEV_PREFIX}}${ver}" >> "$GITHUB_OUTPUT"
        echo "DOCKER_NAME=${{steps.dev_version.outputs.DEV_PREFIX}}${ver}" >> Docker/VERSION

    - name: Set the Docker image name
      id: docker_name
      run: |
        echo "NAME=${{inputs.name}}-${{steps.version.outputs.VERSION}}-docker-image" >> "$GITHUB_OUTPUT"

    - name: Upload Docker image to github artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{steps.docker_name.outputs.NAME}}
        path: Docker

  deploy:
    needs: build-and-test
    name: Trigger push-image workflow
    uses: BigGeo-GIV/bg-ci/.github/workflows/push-image.yml@main
    secrets: inherit
    with:
      docker_name: ${{needs.build-and-test.outputs.docker_name}}
      version: ${{needs.build-and-test.outputs.bg_search_version}}